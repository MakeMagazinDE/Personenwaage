esphome:
  name: waage1
  friendly_name: waage1

esp32:
  board: lolin32_lite
  framework:
    type: arduino

deep_sleep:
  run_duration: 190s
  touch_wakeup: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "H25HoQV1zKVEE04Tux8S9Q+8ljGpA7v4o2RPFeslHzc="

# Kontakt zum MQTT-Broker
mqtt:
  broker: 192.168.10.22
  username: mqtt-user
  password: "!Alicante1"

ota:
  - platform: esphome
    password:  "7743d559a000fb8ea0711d38cf0896c7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Waage1 Fallback Hotspot"
    password: "BT2WbYZnpPCq"

captive_portal:

esp32_touch:
  setup_mode: true

uart:
  rx_pin: 15
  baud_rate: 9600

rdm6300:
  on_tag:
    then:
      - homeassistant.tag_scanned: !lambda 'return to_string(x);'

sensor:
  - platform: hx711
    name: "HX711 Value"
    id: hx711_value
    dout_pin: 16
    clk_pin: 17
    gain: 128
    update_interval: 0.5s
    filters:
      - calibrate_linear:
          - -195612 -> 0
          - 3148967 -> 119.5
      - sliding_window_moving_average:
          window_size: 2
          send_every: 2
          send_first_at: 2
    unit_of_measurement: kg
    accuracy_decimals: 1        

  - platform: homeassistant
    id: Gewicht
    entity_id: sensor.waage1_hx711_value
    internal: true


binary_sensor:
  - platform: esp32_touch
    name: "ESP32 Touch Pad GPIO27"
    pin: 13
    threshold: 223
    wakeup_threshold: 223

  - platform: gpio
    name: "Switch 1"
    pin: 22
    
  - platform: gpio
    name: "Switch 2"
    pin: 19
    
  - platform: gpio
    name: "Switch 3"
    pin: 23

  - platform: rdm6300
    uid: 11520666
    name: "Claudia"
    id: claudia  
    on_press:
      then:
        - mqtt.publish_json:
            topic: /rdm6300
            payload: |-
              root["Person"] = "Claudia";
              root["Gewicht"] = id(hx711_value).state;
        - switch.toggle: rdm6300power

  - platform: rdm6300
    uid: 12113815
    name: "Klaus"
    id: Klaus
    on_press:
      then:
        - mqtt.publish_json:
            topic: /rdm6300
            payload: |-
              root["Person"] = "Klaus";
              root["Gewicht"] = "74,1";  
        - switch.toggle: rdm6300power

switch:
  - platform: gpio
    pin: 18
    inverted: true
    name: "HX711 Switch"
  
  - platform: gpio
    pin: 5
    inverted: false
    name: "RDM6300Power"
    id: rdm6300power


spi:
  clk_pin: GPIO33 # (Pin on display - SCK/T_CLK)
  mosi_pin: GPIO25 # (Pin on display - SDI(MOSI)/T_DIN)
  miso_pin: GPIO35 # (Pin on display - SDO(MISO)/T_DO)

font:
  - file: "fonts/Antenna-Bold.ttf"
    id: my_font
    size: 32
  - file: "fonts/Antenna-Bold.ttf"
    id: my_font2
    size: 64

color:
- id: my_red
  red: 100%
  green: 3%
  blue: 5%
- id: my_cyan
  red: 0%
  green: 80%
  blue: 80%

display:
- platform: ili9xxx
  #model: TFT 2.4
  model: ili9341
  rotation: 270
  cs_pin: GPIO14 # (Pin on display - CS)
  dc_pin: GPIO26 # (Pin on display - DC)
  reset_pin: GPIO27 # (Pin on display - RESET)



  lambda: |-
      it.fill(Color::BLACK);
      it.print(0, 0, id(my_font2), id(my_red), TextAlign::TOP_LEFT, "Make:");  
      it.printf(0,80, id(my_font2), "%4.1f", id(Gewicht).state);
      it.printf(200,80, id(my_font), TextAlign::TOP_LEFT, "Kg");
 
output:
  - platform: ledc
    pin: 32
    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON